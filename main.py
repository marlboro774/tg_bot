import sqlite3
from datetime import datetime
import matplotlib.pyplot as plt
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext, \
    Application

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('finance.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount REAL,
    category TEXT,
    type TEXT,  -- 'income' –∏–ª–∏ 'expense'
    date TEXT,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')
conn.commit()


def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()

    update.message.reply_text(
        "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_income - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "/add_expense - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/report - –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü",
        parse_mode="Markdown"
    )


def add_income(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    context.user_data['waiting_for'] = 'income_amount'


def add_expense(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    context.user_data['waiting_for'] = 'expense_amount'


def main():
    app = Application.builder().token(TG_TOKEN).build()
    handler = MessageHandler(filters.TEXT & ~filters.COMMAND, start)
    app.add_handler(handler)

    app.start_polling()


if __name__ == "__main__":
    main()
